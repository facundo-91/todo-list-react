{"version":3,"sources":["components/App/TaskInput/TaskInput.js","components/App/TaskList/Task/Task.js","components/App/TaskList/TaskList.js","components/App/App.js","serviceWorker.js","index.js"],"names":["TaskInput","props","useState","value","setValue","handleSubmit","e","preventDefault","addTaskFn","onSubmit","className","type","placeholder","onChange","target","onClick","Task","completeTask","id","taskCompleted","taskText","removeTask","TaskList","taskListArr","length","map","taskObject","key","text","completed","removeTaskFn","completeTaskFn","App","tasks","setTasks","newTasks","index","filter","task","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ySAqCeA,G,MAlCG,SAAAC,GAAS,MAEEC,mBAAS,IAFX,mBAElBC,EAFkB,KAEXC,EAFW,KAKpBC,EAAe,SAAAC,GAEpBA,EAAEC,iBAEGJ,IAELF,EAAMO,UAAUL,GAEhBC,EAAS,MAGV,OACC,0BAAMK,SAAUJ,GACf,2BACCK,UAAU,mBACVC,KAAK,OACLC,YAAY,kBACZT,MAAOA,EACPU,SAAU,SAAAP,GAAC,OAAIF,EAASE,EAAEQ,OAAOX,UAElC,4BACCO,UAAU,oBACVK,QAASV,GAFV,UCJYW,G,MArBF,SAAAf,GACZ,OACC,yBAAKS,UAAU,gBACd,2BACCC,KAAK,WACLD,UAAU,gBACVG,SAAU,kBAAMZ,EAAMgB,aAAahB,EAAMiB,OAE1C,uBACCR,UAAWT,EAAMkB,cAAgB,2BAA6B,aAC7DlB,EAAMmB,UAER,4BACCV,UAAU,qBACVK,QAAU,kBAAMd,EAAMoB,WAAWpB,EAAMiB,MAFxC,QCcYI,G,MAzBE,SAAArB,GAChB,OAAiC,IAA7BA,EAAMsB,YAAYC,OAEpB,yBAAKd,UAAU,YACd,qDAKD,yBAAKA,UAAU,aACbT,EAAMsB,YAAYE,KAAK,SAACC,GAAD,OACvB,kBAAC,EAAD,CACCC,IAAKD,EAAWR,GAChBA,GAAIQ,EAAWR,GACfE,SAAUM,EAAWE,KACrBT,cAAeO,EAAWG,UAC1BR,WAAYpB,EAAM6B,aAClBb,aAAchB,EAAM8B,uBC6BXC,EA9CH,WAAM,MAEW9B,mBAAS,IAFpB,mBAET+B,EAFS,KAEFC,EAFE,KAiChB,OACE,6BACD,+CACA,kBAAC,EAAD,CAAW1B,UA/BG,SAAAoB,GAEf,IAAMV,EAAMe,EAAMT,OAAUS,EAAMA,EAAMT,OAAS,GAAGN,GAAK,EAAI,EAEvDiB,EAAQ,sBAAOF,GAAP,CAAc,CAAEf,KAAIU,OAAMC,WAAW,KAEnDK,EAASC,MA0BL,kBAAC,EAAD,CACFZ,YAAaU,EACbH,aAzBgB,SAAAM,GAElB,IAAMD,EAAW,YAAIF,GAAOI,QAAO,SAAAC,GAAI,OAAIA,EAAKpB,KAAOkB,KACvDF,EAASC,IAuBPJ,eApBkB,SAAAK,GAEpB,IAAMD,EAAW,YAAIF,GAAOR,KAAI,SAAAa,GAM/B,OAJIA,EAAKpB,KAAOkB,IAEfE,EAAKT,WAAcS,EAAKT,WAElBS,KAERJ,EAASC,QCtBSI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.50013375.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './TaskInput.css';\n\nconst TaskInput = props => {\n\t// States\n\tconst [ value, setValue ] = useState('');\n\t\n\t// Functions\n\tconst handleSubmit = e => {\n\t\t// Don't refresh page when submit\n\t\te.preventDefault();\n\t\t// Don't run if input field is empty\n\t\tif (!value) return\n\t\t// Pass the input field text to the Fn\n\t\tprops.addTaskFn(value);\n\t\t// Empty input field after add\n\t\tsetValue('');\n\t}\n\n\treturn (\n\t\t<form onSubmit={handleSubmit}>\n\t\t\t<input\n\t\t\t\tclassName='form-input-field'\n\t\t\t\ttype='text'\n\t\t\t\tplaceholder='Enter a task...'\n\t\t\t\tvalue={value}\n\t\t\t\tonChange={e => setValue(e.target.value)}>\n\t\t\t</input>\n\t\t\t<button\n\t\t\t\tclassName='form-input-button'\n\t\t\t\tonClick={handleSubmit}>\n\t\t\t\tADD\n\t\t\t</button>\n\t\t</form>\n\t)\n}\n\nexport default TaskInput;","import React from 'react';\nimport './Task.css';\n\nconst Task = props => {\n\treturn (\n\t\t<div className='task-wrapper'>\n\t\t\t<input\n\t\t\t\ttype='checkbox'\n\t\t\t\tclassName='task-checkbox'\n\t\t\t\tonChange={() => props.completeTask(props.id)}>\n\t\t\t</input>\n\t\t\t<p\n\t\t\t\tclassName={props.taskCompleted ? 'task-text task-completed' : 'task-text'}>\n\t\t\t\t{props.taskText}\n\t\t\t</p>\n\t\t\t<button\n\t\t\t\tclassName='task-remove-button'\n\t\t\t\tonClick={ () => props.removeTask(props.id)}>\n\t\t\t\tX\n\t\t\t</button>\n\t\t</div>\n\t)\n}\n\nexport default Task;","import React from 'react';\nimport Task from './Task/Task';\nimport './TaskList.css';\n\nconst TaskList = props => {\n\tif (props.taskListArr.length === 0) {\n\t\treturn (\n\t\t\t<div className='no-tasks'>\n\t\t\t\t<p>YOU DON'T HAVE TASKS!</p>\n\t\t\t</div>\n\t\t)\n\t} else {\n\t\treturn (\n\t\t\t<div className='task-list'>\n\t\t\t\t{props.taskListArr.map( (taskObject) => (\n\t\t\t\t\t<Task\n\t\t\t\t\t\tkey={taskObject.id}\n\t\t\t\t\t\tid={taskObject.id}\n\t\t\t\t\t\ttaskText={taskObject.text}\n\t\t\t\t\t\ttaskCompleted={taskObject.completed}\n\t\t\t\t\t\tremoveTask={props.removeTaskFn}\n\t\t\t\t\t\tcompleteTask={props.completeTaskFn}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default TaskList;","import React, { useState } from 'react';\nimport TaskInput from './TaskInput/TaskInput';\nimport TaskList from './TaskList/TaskList';\n\nconst App = () => {\n\t// States\n\tconst [ tasks, setTasks ] = useState([]);\n\n\t// Functions\n\tconst addTask = text => {\n\t\t// Generate an ID for every task\n\t\tconst id = (tasks.length) ? tasks[tasks.length - 1].id + 1 : 0;\n\t\t// Generate an object for every new task\n\t\tconst newTasks = [...tasks, { id, text, completed: false }];\n\t\t// Change the state with the new array\n\t\tsetTasks(newTasks);\n\t}\n\n\tconst removeTask = index => {\n\t\t// Use filter to return a new array without the task selected to delete\n\t\tconst newTasks = [...tasks].filter(task => task.id !== index);\n\t\tsetTasks(newTasks);\n\t}\n\n\tconst completeTask = index => {\n\t\t// Map through the array\n\t\tconst newTasks = [...tasks].map(task => {\n\t\t\t// When match with the index of component\n\t\t\tif (task.id === index) {\n\t\t\t\t// Interchange the boolean state\n\t\t\t\ttask.completed = !(task.completed)\n\t\t\t}\n\t\t\treturn task\n\t\t})\n\t\tsetTasks(newTasks)\n\t}\n\n  return (\n    <div>\n\t\t\t<h1>TO-DO REACT APP</h1>\n\t\t\t<TaskInput addTaskFn={addTask} />\n      <TaskList\n\t\t\t\ttaskListArr={tasks}\n\t\t\t\tremoveTaskFn={removeTask}\n\t\t\t\tcompleteTaskFn={completeTask}\n\t\t\t/>\n    </div>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}